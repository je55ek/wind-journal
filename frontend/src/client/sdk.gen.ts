// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  AuthenticationLoginData,
  AuthenticationLoginResponse,
  AuthenticationRecoverPasswordData,
  AuthenticationRecoverPasswordResponse,
  AuthenticationResetPasswordData,
  AuthenticationResetPasswordResponse,
  HealthResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UsersGetMeResponse,
  UsersGetUserData,
  UsersGetUserResponse,
  UsersGetUsersData,
  UsersGetUsersResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
} from "./types.gen"

export class AuthenticationService {
  /**
   * Login
   * Exchange a username and password for an access token.
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static login(
    data: AuthenticationLoginData,
  ): CancelablePromise<AuthenticationLoginResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password
   * Send an email to reset a forgotten password.
   *
   * If there is no user with the specified email, then this is a no-op and no error is returned.
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: AuthenticationRecoverPasswordData,
  ): CancelablePromise<AuthenticationRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset a user's password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: AuthenticationResetPasswordData,
  ): CancelablePromise<AuthenticationResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class DefaultService {
  /**
   * Health
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static health(): CancelablePromise<HealthResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/health",
    })
  }
}

export class UsersService {
  /**
   * Get Users
   * Paginate through all users.
   *
   * Accessible only to administrators.
   * @param data The data for the request.
   * @param data.count
   * @param data.cursor
   * @returns Page_UserPublic_ Successful Response
   * @throws ApiError
   */
  public static getUsers(
    data: UsersGetUsersData,
  ): CancelablePromise<UsersGetUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        count: data.count,
        cursor: data.cursor,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create a new user.
   *
   * Accessible only to administrators.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Me
   * Return the currently authenticated user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static getMe(): CancelablePromise<UsersGetMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Get User
   * Get a user by their ID.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static getUser(
    data: UsersGetUserData,
  ): CancelablePromise<UsersGetUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}
